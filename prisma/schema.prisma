generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(cuid())
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  image         String?
  phone_number  String?
  role          String       @default("visitor")
  accounts      Account[]
  Bookings      Bookings[]
  Houses        Houses[]
  MeterReads    MeterReads[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bookings {
  id         Int          @id @default(autoincrement())
  visitor_id String
  house_id   Int
  start_date DateTime     @db.Timestamp(6)
  end_date   DateTime     @db.Timestamp(6)
  created_at DateTime?    @default(now()) @db.Timestamptz(6)
  Houses     Houses       @relation(fields: [house_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User       User         @relation(fields: [visitor_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  MeterReads MeterReads[]
}

model Houses {
  id             Int        @id @default(autoincrement())
  owned_by       String
  address_line_1 String?
  address_line_2 String?
  image_url      String?
  house_name     String
  created_at     DateTime?  @default(now()) @db.Timestamptz(6)
  kw_h_cost      Int?       @db.SmallInt
  Bookings       Bookings[]
  User           User       @relation(fields: [owned_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model MeterReads {
  id                     Int       @id @default(autoincrement())
  booking_id             Int
  posted_by              String
  value                  Int
  img_url                String
  created_at             DateTime? @default(now()) @db.Timestamptz(6)
  kw_h_cost_when_created Float?
  Bookings               Bookings  @relation(fields: [booking_id], references: [id], onDelete: NoAction, onUpdate: NoAction)
  User                   User      @relation(fields: [posted_by], references: [id], onDelete: NoAction, onUpdate: NoAction)
}
